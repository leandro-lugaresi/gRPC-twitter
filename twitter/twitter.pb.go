// Code generated by protoc-gen-go.
// source: twitter/twitter.proto
// DO NOT EDIT!

/*
Package twitter is a generated protocol buffer package.

It is generated from these files:
	twitter/twitter.proto

It has these top-level messages:
	Token
	User
	Tweet
	Search
	Timeline
*/
package twitter

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Token struct {
	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	SecretToken string `protobuf:"bytes,2,opt,name=secret_token,json=secretToken" json:"secret_token,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type User struct {
	Id         int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	ScreenName string `protobuf:"bytes,3,opt,name=screen_name,json=screenName" json:"screen_name,omitempty"`
	Url        string `protobuf:"bytes,4,opt,name=url" json:"url,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Tweet struct {
	Id            int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Text          string `protobuf:"bytes,2,opt,name=Text,json=text" json:"Text,omitempty"`
	User          *User  `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	Retweeted     bool   `protobuf:"varint,4,opt,name=retweeted" json:"retweeted,omitempty"`
	RetweetCount  int32  `protobuf:"varint,5,opt,name=retweet_count,json=retweetCount" json:"retweet_count,omitempty"`
	Favorited     bool   `protobuf:"varint,6,opt,name=favorited" json:"favorited,omitempty"`
	FavoriteCount int32  `protobuf:"varint,7,opt,name=favorite_count,json=favoriteCount" json:"favorite_count,omitempty"`
}

func (m *Tweet) Reset()                    { *m = Tweet{} }
func (m *Tweet) String() string            { return proto.CompactTextString(m) }
func (*Tweet) ProtoMessage()               {}
func (*Tweet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Tweet) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type Search struct {
	Text  string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	Token *Token `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
}

func (m *Search) Reset()                    { *m = Search{} }
func (m *Search) String() string            { return proto.CompactTextString(m) }
func (*Search) ProtoMessage()               {}
func (*Search) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Search) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

type Timeline struct {
	Tweets []*Tweet `protobuf:"bytes,1,rep,name=tweets" json:"tweets,omitempty"`
}

func (m *Timeline) Reset()                    { *m = Timeline{} }
func (m *Timeline) String() string            { return proto.CompactTextString(m) }
func (*Timeline) ProtoMessage()               {}
func (*Timeline) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Timeline) GetTweets() []*Tweet {
	if m != nil {
		return m.Tweets
	}
	return nil
}

func init() {
	proto.RegisterType((*Token)(nil), "twitter.Token")
	proto.RegisterType((*User)(nil), "twitter.User")
	proto.RegisterType((*Tweet)(nil), "twitter.Tweet")
	proto.RegisterType((*Search)(nil), "twitter.Search")
	proto.RegisterType((*Timeline)(nil), "twitter.Timeline")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Twitter service

type TwitterClient interface {
	// We have a method called `GetTimeline` which takes
	// parameter called `Token` and returns
	// the user `Timeline` (list of `Tweets`).
	GetTimeline(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Timeline, error)
	// We have a method called `UserStream` which takes
	// parameter called `Token` and `Search` and returns
	// an stream of `Tweets`
	UserStream(ctx context.Context, in *Search, opts ...grpc.CallOption) (Twitter_UserStreamClient, error)
}

type twitterClient struct {
	cc *grpc.ClientConn
}

func NewTwitterClient(cc *grpc.ClientConn) TwitterClient {
	return &twitterClient{cc}
}

func (c *twitterClient) GetTimeline(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Timeline, error) {
	out := new(Timeline)
	err := grpc.Invoke(ctx, "/twitter.Twitter/GetTimeline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterClient) UserStream(ctx context.Context, in *Search, opts ...grpc.CallOption) (Twitter_UserStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Twitter_serviceDesc.Streams[0], c.cc, "/twitter.Twitter/UserStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &twitterUserStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Twitter_UserStreamClient interface {
	Recv() (*Tweet, error)
	grpc.ClientStream
}

type twitterUserStreamClient struct {
	grpc.ClientStream
}

func (x *twitterUserStreamClient) Recv() (*Tweet, error) {
	m := new(Tweet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Twitter service

type TwitterServer interface {
	// We have a method called `GetTimeline` which takes
	// parameter called `Token` and returns
	// the user `Timeline` (list of `Tweets`).
	GetTimeline(context.Context, *Token) (*Timeline, error)
	// We have a method called `UserStream` which takes
	// parameter called `Token` and `Search` and returns
	// an stream of `Tweets`
	UserStream(*Search, Twitter_UserStreamServer) error
}

func RegisterTwitterServer(s *grpc.Server, srv TwitterServer) {
	s.RegisterService(&_Twitter_serviceDesc, srv)
}

func _Twitter_GetTimeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterServer).GetTimeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twitter.Twitter/GetTimeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterServer).GetTimeline(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _Twitter_UserStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Search)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TwitterServer).UserStream(m, &twitterUserStreamServer{stream})
}

type Twitter_UserStreamServer interface {
	Send(*Tweet) error
	grpc.ServerStream
}

type twitterUserStreamServer struct {
	grpc.ServerStream
}

func (x *twitterUserStreamServer) Send(m *Tweet) error {
	return x.ServerStream.SendMsg(m)
}

var _Twitter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "twitter.Twitter",
	HandlerType: (*TwitterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTimeline",
			Handler:    _Twitter_GetTimeline_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UserStream",
			Handler:       _Twitter_UserStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("twitter/twitter.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 363 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x52, 0x4d, 0x4f, 0xc2, 0x40,
	0x10, 0xa5, 0xf4, 0x03, 0x98, 0x02, 0xea, 0x26, 0x26, 0x84, 0x98, 0xa8, 0xf5, 0x23, 0x9e, 0x50,
	0xeb, 0x3f, 0xd0, 0x83, 0x27, 0x3d, 0x2c, 0xf5, 0x68, 0x48, 0x2d, 0x63, 0x6c, 0x84, 0x96, 0x6c,
	0x17, 0xf1, 0x97, 0xfa, 0x7b, 0xdc, 0x9d, 0xdd, 0x96, 0x48, 0x3c, 0x31, 0xf3, 0xde, 0xdb, 0x37,
	0x6f, 0x86, 0xc2, 0xa1, 0xdc, 0xe4, 0x52, 0xa2, 0xb8, 0xb6, 0xbf, 0x93, 0x95, 0x28, 0x65, 0xc9,
	0x3a, 0xb6, 0x8d, 0x9e, 0xc0, 0x4f, 0xca, 0x4f, 0x2c, 0xd8, 0x29, 0xf4, 0xd3, 0x2c, 0xc3, 0xaa,
	0x9a, 0x49, 0xdd, 0x8f, 0x9c, 0x13, 0xe7, 0xaa, 0xc7, 0x43, 0x83, 0x35, 0x92, 0x0a, 0x33, 0x81,
	0xd2, 0x4a, 0xda, 0x46, 0x62, 0x30, 0x92, 0x44, 0xaf, 0xe0, 0xbd, 0x54, 0x28, 0xd8, 0x10, 0xda,
	0xf9, 0x9c, 0x3c, 0x5c, 0xae, 0x2a, 0xc6, 0xc0, 0x2b, 0xd2, 0x25, 0xda, 0x27, 0x54, 0xb3, 0x63,
	0x08, 0x2b, 0xf5, 0x12, 0x8b, 0x19, 0x51, 0x2e, 0x51, 0x60, 0xa0, 0x67, 0x2d, 0xd8, 0x07, 0x77,
	0x2d, 0x16, 0x23, 0x8f, 0x08, 0x5d, 0x46, 0x3f, 0x8e, 0x8a, 0xbb, 0x41, 0x94, 0xff, 0x0d, 0x48,
	0xf0, 0x5b, 0xd6, 0x03, 0xa4, 0xaa, 0x55, 0x5e, 0x6f, 0xad, 0xc2, 0x90, 0x73, 0x18, 0x0f, 0x26,
	0xf5, 0x09, 0x74, 0x42, 0x4e, 0x14, 0x3b, 0x82, 0x9e, 0xca, 0xae, 0x1d, 0x71, 0x4e, 0x83, 0xba,
	0x7c, 0x0b, 0xb0, 0x33, 0x18, 0xd8, 0x66, 0x96, 0x95, 0xeb, 0x42, 0x8e, 0x7c, 0xa5, 0xf0, 0x79,
	0xdf, 0x82, 0x0f, 0x1a, 0xd3, 0x16, 0xef, 0xe9, 0x57, 0x29, 0x72, 0x6d, 0x11, 0x18, 0x8b, 0x06,
	0x60, 0x17, 0x30, 0xac, 0x1b, 0xeb, 0xd1, 0x21, 0x8f, 0x41, 0x8d, 0x92, 0x49, 0x74, 0x0f, 0xc1,
	0x14, 0x53, 0x91, 0x7d, 0xe8, 0x45, 0x74, 0x78, 0x7b, 0x7f, 0xb3, 0xc8, 0x39, 0xf8, 0xdb, 0x8b,
	0x87, 0xf1, 0xb0, 0xd9, 0x84, 0x8e, 0xce, 0x0d, 0x19, 0xc5, 0xd0, 0x4d, 0xf2, 0x25, 0x2e, 0xf2,
	0x02, 0xd9, 0x25, 0x04, 0x14, 0xb1, 0x52, 0x3e, 0xee, 0xdf, 0x27, 0x1a, 0xe6, 0x96, 0x8d, 0x57,
	0xd0, 0x49, 0x0c, 0xc1, 0x62, 0x08, 0x1f, 0xd5, 0xdf, 0x58, 0x3b, 0xec, 0x0c, 0x19, 0x1f, 0x6c,
	0x7b, 0x2b, 0x89, 0x5a, 0xec, 0x16, 0x40, 0x1f, 0x73, 0x2a, 0x05, 0xa6, 0x4b, 0xb6, 0xd7, 0x48,
	0xcc, 0x2e, 0xe3, 0x9d, 0xa9, 0x51, 0xeb, 0xc6, 0x79, 0x0b, 0xe8, 0x03, 0xbc, 0xfb, 0x0d, 0x00,
	0x00, 0xff, 0xff, 0x58, 0xef, 0x24, 0x94, 0x99, 0x02, 0x00, 0x00,
}
